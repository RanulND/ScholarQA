{"Title": "Smart-Infinity: Fast Large Language Model Training using Near-Storage Processing on a Real System", "Doi": "10.1109/HPCA57654.2024.00034", "Authors": ["h. jang", "j. song", "j. jung", "j. park", "y. kim", "j. lee"], "Key Words": ["processing in-memory/near-memory/in-cache", "fpga: architectures and accelerators", "large language models (llms)"], "Abstract": "the recent huge advance of large language models  llms  is mainly driven by the increase in the number of parameters. this has led to substantial memory capacity requirements necessitating the use of dozens of gpus just to meet the capacity. one popular solution to this is storage offloaded training which uses host memory and storage as an extended memory hierarchy. however this obviously comes at the cost of storage bandwidth bottleneck because storage devices have orders of magnitude lower bandwidth compared to that of gpu device memories. our work smart infinity addresses the storage bandwidth bottleneck of storage offloaded llm training using near storage processing devices on a real system. the main component of smart infinity is smartupdate which performs parameter updates on custom near storage accelerators. we identify that moving parameter updates to the storage side removes most of the storage traffic. in addition we propose an efficient data transfer handler structure to address the system integration issues for smart infinity. the handler allows overlapping data transfers with fixed memory consumption by reusing the device buffer. lastly we propose accelerator assisted gradient compression decompression to enhance the scalability of smart infinity. when scaling to multiple near storage processing devices the write traffic on the shared channel becomes the bottleneck. to alleviate this we compress the gradients on the gpu and decompress them on the accelerators. it provides further acceleration from reduced traffic. as a result smart infinity achieves a significant speedup compared to the baseline. notably smartinfinity is a ready to use approach that is fully integrated into pytorch on a real system. the implementation of smart infinity is available at https //github.com ais snu smart infinity.", "Pub Date": "2024-04-02"}