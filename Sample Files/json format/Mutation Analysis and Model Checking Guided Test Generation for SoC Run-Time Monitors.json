{"Title": "Mutation Analysis and Model Checking Guided Test Generation for SoC Run-Time Monitors", "Doi": "10.1109/VLSID57277.2023.00057", "Authors": ["s. srinivasan", "r. vemuri"], "Key Words": ["model checking", "security vulnerability", "mutation analysis", "run-time monitors", "test program generation", "system-on-chip", "fpga emulation", "code coverage", "assertion based verification"], "Abstract": "security verification and validation both before and after fabrication emerged as an important concern in the design of systems on chip  soc  architectures. assertion based formal methods are widely for pre fabrication verification of soc designs. assertions denoting the soc security policies are formally verified to check if the design satisfies these specifications. in addition several researchers have proposed to migrate these assertions into silicon as run time monitors to facilitate continuous run time security monitoring. however due to limited observability post silicon validation of these run time monitors requires input sequences that are specifically targeted to testing these monitors. in this paper we present a methodology to produce a variety of tests for assertion based run time monitors. given temporal logic assertions which denote security properties of an soc design the methodology consists of the following steps   1  introduce mutations into the soc design model to cause assertion failures  2  use model checking to produce counterexample traces  3  generate alternative and longer counterexamples for a mutant with the help of novel algorithms to enhance the test suite  4  extract test programs from the counterexamples and winnow repetitive test cases  5  investigate the code coverage of the design with the help of these multiple tests. this methodology can be used to generate a large number of tests for each security monitor enhancing the design code coverage. we demonstrate the methodology for a large openrisc 1200 based soc design. we show the effectiveness of the generated test programs via simulation and fpga based emulation.", "Pub Date": "2023-04-10"}