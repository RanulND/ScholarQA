{"Title": "An Empirical Study on Fine-Tuning Large Language Models of Code for Automated Program Repair", "Doi": "10.1109/ASE56229.2023.00181", "Authors": ["k. huang", "x. meng", "j. zhang", "y. liu", "w. wang", "s. li", "y. zhang"], "Key Words": ["automated program repair", "large language models of code", "neural machine translation", "fine-tuning"], "Abstract": "the advent of large language models  large language model  has opened up new opportunities for automated program repair  automated program repair . in particular some recent studies have explored how to leverage large language models of code  llmcs  for program repair tasks and show promising results. however most of them adopt the zero few shot learning paradigm for automated program repair which directly use llmcs to generate the possibly correct code given its surrounding context. though effective the repair capabilities of llmcs based on the fine tuning paradigm have yet to be extensively explored. also it remains unknown whether llmcs have the potential to repair more complicated bugs  e.g. multi hunk bugs . to fill the gap in this work we conduct a comprehensive study on the program repair capability of llmcs in the fine tuning paradigm. we select 5 popular llmcs with representative pre training architectures including codebert graphcode bert plbart codet5 and unix coder. we consider 3 typical program repair scenarios  i.e. bugs vulnerabilities and errors  involving 3 programming languages  i.e. java $\\mathrm{c}/\\mathrm{c}++$ and javascript . notably we take both single hunk and multi hunk bugs vulnerabilities into account. we then fine tune them on widely used datasets and compare them with existing state of the art automated program repair tools. we also investigate the impact of different design choices which include code abstractions code representations and model evaluation metrics. our experimental results show that llmcs in the fine tuning paradigm can significantly outperform previous state of the art automated program repair tools. through in depth analysis we provide insights into choosing appropriate strategies to guide llmcs for better performance. lastly we reveal several limitations of llmcs for automated program repair and make suggestions for future research on llmc based automated program repair.", "Pub Date": "2023-11-08"}